"use strict";(()=>{var A="app-v1";var Q=e=>`${x(e)}/offline.html`,L={key:"X-Cache-Hit",value:"SW HIT"},X="Sw-Net-Err",z="Sw-Policy",M=1,B=2,Y=3,j=4,Z={networkOnly:{"Sw-Policy":B.toString()},networkFirst:{"Sw-Policy":M.toString()},cacheFirst:{"Sw-Policy":Y.toString()},cacheOnly:{"Sw-Policy":j.toString()}},R=(e,n)=>({"Last-Modified":new Date().toUTCString(),"Sw-Source":"shabah","Content-Length":n.toString(),"Content-Type":e}),x=e=>e.endsWith("/")?e.slice(0,-1):e,ee=e=>`${x(e)}/__download-indices__.json`,te=e=>`${x(e)}/__cargo-indices__.json`,y={updatedExisting:0,createdNew:1,notFound:2,removed:3,saved:4},Fe=e=>`${x(e)}/__err-download-index__.json`,ke=e=>!e.startsWith("http://")&&!e.startsWith("https://");var oe=async(e,n,t)=>{if(ke(e))throw new Error("error download indices storage url must be a full url and not a relative one. Got "+e);let o=Fe(e),r=JSON.stringify(n),p=new Response(r,{status:200,statusText:"OK"});return await t.putFile(o,p),y.saved},G=()=>({downloads:[],totalBytes:0,version:1,updatedAt:Date.now(),createdAt:Date.now(),savedAt:Date.now()}),ne=async(e,n)=>{let t=ee(e),o=await n.getFile(t);if(!o||!o.ok)return G();try{return await o.json()}catch{return G()}};var se=(e,n)=>{let t=e.downloads.findIndex(r=>r.id===n);if(t<0)return y.notFound;let o=e.downloads[t];return e.totalBytes-=o.bytes,e.downloads.splice(t,1),y.removed},re=async(e,n,t)=>{e.savedAt=Date.now();let o=JSON.stringify(e),r=ee(n);return await t.putFile(r,new Response(o,{status:200,statusText:"OK",headers:R("application/json",ce(o))})),y.saved},V=()=>({cargos:[],updatedAt:Date.now(),createdAt:Date.now(),savedAt:Date.now(),version:1}),ae=async(e,n)=>{let t=te(e),o=await n.getFile(t);if(!o||!o.ok)return V();try{return await o.json()}catch{return V()}},ie=(e,n)=>{let t=Date.now();e.updatedAt=t;let o=e.cargos.findIndex(c=>c.id===n.id);if(o<0)return e.cargos.push({...n,updatedAt:t,createdAt:t}),y.createdNew;let p={...e.cargos[o],...n,updatedAt:t};return e.cargos[o]=p,y.updatedExisting},ce=e=>new TextEncoder().encode(e).length,le=async(e,n,t)=>{e.savedAt=Date.now();let o=JSON.stringify(e),r=te(n);return await t.putFile(r,new Response(o,{status:200,statusText:"OK",headers:R("application/json",ce(o))})),y.saved};var $=e=>{let{fileCache:n,origin:t,log:o,type:r}=e;return async p=>{let c=`[\u{1F415}\u200D\u{1F9BA} bg-fetch ${r}]`,w=p.registration;o(c,"registration:",w);let a=w.id,f=await w.matchAll();if(o(c,"resources downloaded",f.map(d=>d.request.url)),f.length<0)return;let[I,F]=await Promise.all([ne(t,n),ae(t,n)]),k=I.downloads.findIndex(({id:d})=>d===a),D=F.cargos.findIndex(d=>d.id===a);if(o(c,`found: cargo=${D>-1}, download=${k>-1}`),k<0||D<0)return;let s=I.downloads[k],{map:l,title:E,id:ye}=s,b=f.length;o(c,"processing download for pkg",ye);let T=30,H=0,W=Math.min(b,T),U=0,K=0,q={...s,map:{},bytes:0,startedAt:Date.now()};for(;H<b;){let d=[];for(let u=H;u<W;u++){let P=f[u];d.push((async()=>{let m=await P.responseReady,h=(C=>{if(C.startsWith("https://")||C.startsWith("http://"))return C;let Ie=C.startsWith("/")?C:"/"+C;return`${x(t)}/${Ie}`})(P.request.url),N=l[h];if(!N)return o(c,`orphaned resource found url=${h}, couldn't map to resource`);U++;let{storageUrl:xe,bytes:J,mime:me}=N;if(!m.ok){q.map[h]={...N,status:m.status,statusText:m.statusText||"UNKNOWN STATUS"},K++,q.bytes+=J;return}let Ce=await m.text();return n.putFile(xe,new Response(Ce,{status:200,statusText:"OK",headers:R(me,J)}))})())}await Promise.all(d),H+=T,W=Math.min(b,W+T)}if(o(c,`processed ${U} out of ${b}. orphan_count=${b-U}, fail_count=${K}`),se(I,a),ie(F,{...F.cargos[D],state:(d=>{switch(d){case"abort":return"update-aborted";case"fail":return"update-failed";case"success":default:return"cached"}})(r)}),await Promise.all([le(F,t,n),re(I,t,n)]),r==="abort"||r==="fail"){let{storageRootUrl:d}=s,u=d;if(!u.startsWith("https://")&&!u.startsWith("http://")){let P=x(t),m=(h=>h.startsWith("./")?h.slice(2):h.startsWith("/")?h.slice(1):h)(u);u=`${P}/${m}`,o(c,`detected storage root url as a relative url - full url is required. Adding origin to url original=${d}, new=${u}`)}await oe(u,q,n),o(c,"successfully saved error log")}if(o(c,"successfully persisted changes"),(r==="fail"||r==="success")&&p.updateUI){let d=r==="fail"?"failed":"finished";await p.updateUI({title:`${E} ${d}!`})}}};var v=L.key,_=L.value,be=Z.cacheFirst["Sw-Policy"],de=e=>new Response("",{status:500,statusText:"Internal Server Error",headers:{[X]:String(e)||"1"}}),ue=new Response("not in cache",{status:404,statusText:"NOT FOUND"}),ge=e=>{let{origin:n,fileCache:t,fetchFile:o,log:r}=e,p=n.endsWith("/")?n:n+"/",c=Q(n);return async w=>{let{request:a}=w;r(`incoming request (mode=${a.mode}) from: ${a.referrer}`);let f=a.url.split("?")[0];if(f===p)try{let s=await o(a);return r(`requesting root document (network-first): url=${a.url}, status=${s.status}`),s}catch(s){let l=await t.getFile(c);return r(`root doc request failed: fallback_url=${c}, network_err=true, status=${l?.status||"none"}, status_text=${l?.statusText||"none"}`),l&&l.ok?(l.headers.append(v,_),l):de(s)}if(f===c){let s=await t.getFile(c);return r(`requesting root document fallback (cache-only): url=${a.url}, exists=${!!s}, status=${s?.status||"none"}`),s&&s.ok?(s.headers.append(v,_),s):ue}let k=a.headers.get(z)||be;switch(parseInt(k,10)){case M:try{let s=await o(a);return r(`incoming request (network-first): url=${a.url}, status=${s.status}`),s}catch(s){let l=await t.getFile(a.url),E=l&&l.ok;return r(`incoming request (network-first): url=${a.url}, network_err=true, cache_fallback=${E}`),l&&l.ok?(l.headers.append(v,_),l):de(s)}case B:return r(`incoming request (network-only): url=${w.request.url}`),o(a);case j:{let s=await t.getFile(a.url);return r(`incoming request (cache-only): url=${a.url}, found=${!!s}, status=${s?.status||"none"}`),s&&s.ok?(s.headers.append(v,_),s):ue}case Y:default:{let s=await t.getFile(a.url);return r(`incoming request (cache-first): url=${a.url}, cache_hit=${!!s}, status=${s?.status||"none"}`),s&&s.ok?(s.headers.append(v,_),s):o(w.request)}}}};var pe=e=>({getFile:async t=>await(await caches.open(e)).match(t)||null,putFile:async(t,o)=>(await(await caches.open(e)).put(t,o),!0),deleteFile:async t=>(await caches.open(e)).delete(t),listFiles:async()=>await(await caches.open(e)).keys(),deleteAllFiles:async()=>await caches.delete(e),queryUsage:async()=>{let{quota:t=0,usage:o=0}=await navigator.storage.estimate();return{quota:t,usage:o}},isPersisted:async()=>await navigator.storage.persisted(),requestPersistence:async()=>await navigator.storage.persist()});var i=globalThis.self,we=`${i.location.origin}/__sw-config__.json`,g={version:1,log:!0,updatedAt:-1,createdAt:Date.now()};caches.open(A).then(async e=>{let n=await e.match(we);if(!n)return fe();let t=await n.json();g={...g,...t}});var fe=async()=>{let e=await caches.open(A);return g.updatedAt=Date.now(),e.put(we,new Response(JSON.stringify(g),{status:200}))};i.oninstall=e=>e.waitUntil(i.skipWaiting());i.onactivate=e=>{e.waitUntil((async()=>{await i.clients.claim(),console.info("[\u{1F4E5} install] new service-worker installed"),console.info("[\u{1F525} activate] new sevice worker in control, started with config",g)})())};var S=pe(A),O=(...e)=>{g.log&&console.info(...e)},ve=ge({fileCache:S,origin:i.location.origin,fetchFile:fetch,log:O});i.onfetch=e=>e.respondWith(ve(e));var _e=$({origin:i.location.origin,fileCache:S,log:O,type:"success"});i.onbackgroundfetchsuccess=e=>e.waitUntil(_e(e));i.onbackgroundfetchclick=()=>i.clients.openWindow("/");var De=$({origin:i.location.origin,fileCache:S,log:O,type:"abort"});i.onbackgroundfetchabort=e=>e.waitUntil(De(e));var Pe=$({origin:i.location.origin,fileCache:S,log:O,type:"fail"});i.onbackgroundfetchfail=e=>e.waitUntil(Pe(e));var he={"config:silent_logs":()=>{g.log=!1},"config:verbose_logs":()=>{g.log=!0},"list:connected_clients":async e=>{let n=await i.clients.matchAll();console.info(`connected clients (${n.length}): ${n.map(t=>`(id=${t.id||"unknown"}, url=${t.url}, type=${t.type})
`).join(",")}`)},"list:config":e=>{console.info("config:",g)}};i.onmessage=e=>e.waitUntil((async()=>{let n=e.data,t=e.source.id;if(!he[n?.action])return console.warn(`received incorrectly encoded message ${n} from client ${t}`);await he[n.action](t),n.action.startsWith("config:")&&(fe(),console.info("config changed, new config:",g))})());})();
