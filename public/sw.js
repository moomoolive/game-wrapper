"use strict";(()=>{var m="app-v1";var E={key:"X-Cache-Hit",value:"SW HIT"},q="Sw-Net-Err",W="Sw-Policy",A={networkOnly:{"Sw-Policy":"network-only"},networkFirst:{"Sw-Policy":"network-first"},cacheFirst:{"Sw-Policy":"cache-first"}},v=(e,t)=>({"Last-Modified":new Date().toUTCString(),"Sw-Source":"shabah","Content-Length":t.toString(),"Content-Type":e}),k=e=>e.endsWith("/")?e.slice(0,-1):e,M=e=>`${k(e)}/__download-indices__.json`,$=e=>`${k(e)}/__cargo-indices__.json`,U=()=>({downloads:[],totalBytes:0,version:1,updatedAt:Date.now(),createdAt:Date.now(),savedAt:Date.now()}),T=async(e,t)=>{let o=M(e),n=await t.getFile(o);if(!n||!n.ok)return U();try{return await n.json()}catch{return U()}},y={updatedExisting:0,createdNew:1,notFound:2,removed:3,saved:4};var H=(e,t)=>{let o=e.downloads.findIndex(r=>r.id===t);if(o<0)return y.notFound;let n=e.downloads[o];return e.totalBytes-=n.bytes,e.downloads.splice(o,1),y.removed},L=async(e,t,o)=>{e.savedAt=Date.now();let n=JSON.stringify(e),r=M(t);return await o.putFile(r,new Response(n,{status:200,statusText:"OK",headers:v("application/json",K(n))})),y.saved},_=()=>({cargos:[],updatedAt:Date.now(),createdAt:Date.now(),savedAt:Date.now(),version:1}),N=async(e,t)=>{let o=$(e),n=await t.getFile(o);if(!n||!n.ok)return _();try{return await n.json()}catch{return _()}},j=(e,t)=>{let o=Date.now();e.updatedAt=o;let n=e.cargos.findIndex(l=>l.id===t.id);if(n<0)return e.cargos.push({...t,updatedAt:o,createdAt:o}),y.createdNew;let s={...e.cargos[n],...t,updatedAt:o};return e.cargos[n]=s,y.updatedExisting},K=e=>new TextEncoder().encode(e).length,G=async(e,t,o)=>{e.savedAt=Date.now();let n=JSON.stringify(e),r=$(t);return await o.putFile(r,new Response(n,{status:200,statusText:"OK",headers:v("application/json",K(n))})),y.saved};var J=E.key,z=E.value,de=A.networkOnly["Sw-Policy"],le=A.networkFirst["Sw-Policy"],X=e=>{let{rootDoc:t,cache:o,fetchFile:n,log:r}=e;return async s=>{let{request:l}=s,p=l.headers.get(W);if(p===de)return r(`incoming request (network-only): url=${s.request.url}`),n(l);if(p===le||l.url===t)try{let u=await n(s.request);return r(`incoming request (network-first): url=${s.request.url}, status=${u.status}`),u}catch(u){let d=await o.getFile(s.request.url),f=d&&d.ok;return r(`incoming request (network-first): url=${s.request.url}, network_err=true, cache_fallback=${f}`),d&&d.ok?(d.headers.append(J,z),d):new Response("",{status:500,statusText:"Internal Server Error",headers:{[q]:String(u)||"1"}})}let c=await o.getFile(s.request.url);return r(`incoming request (cache-first): url=${s.request.url}, cache_hit=${!!c}, status=${c?.status||"none"}`),c&&c.ok?(c.headers.append(J,z),c):n(s.request)}},Z=e=>{let{fileCache:t,origin:o,log:n}=e;return async r=>{let s=r.registration;if(n("bg-fetch registration:",s),!s.recordsAvailable||s.result!=="success")return;let l=s.id,p=await s.matchAll();if(n("bg-fetch resources downloaded",p.map(g=>g.request.url)),p.length<0)return;let[c,u]=await Promise.all([T(o,t),N(o,t)]),d=c.downloads.findIndex(({id:g})=>g===l),f=u.cargos.findIndex(g=>g.id===l);if(n(`bg-fetch found: cargo=${f>-1}, download=${d>-1}`),d<0||f<0)return;let{map:te,title:oe}=c.downloads[d],w=p.length,b=30,I=0,F=Math.min(w,b),C=0;for(;I<w;){let g=[];for(let R=I;R<F;R++){let S=p[R];g.push((async()=>{let ne=await S.responseReady,O=(h=>{if(h.startsWith("https://")||h.startsWith("http://"))return h;let ie=h.startsWith("/")?h:"/"+h;return`${k(o)}/${ie}`})(S.request.url),B=te[O];if(!B)return n(`bg-fetch orphaned resource found url=${O}, couldn't map to resource`);C++;let{storageUrl:re,bytes:se,mime:ae}=B,ce=await ne.text();return t.putFile(re,new Response(ce,{status:200,statusText:"OK",headers:v(ae,se)}))})())}await Promise.all(g),I+=b,F=Math.min(w,F+b)}n(`processed ${C} out of ${w}. orphan_count=${w-C}`),H(c,l),j(u,{...u.cargos[f],state:"cached"}),await Promise.all([G(u,o,t),L(c,o,t)]),n("bg-fetch successfully persisted changes"),await r.updateUI({title:`${oe} finished!`})}};var a=globalThis.self,P=a.location.origin+"/",D=P+"__sw-config__.json",i={version:1,log:!0,savedAt:-1};caches.open(m).then(async e=>{let t=await e.match(D);if(!t)return Y();let o=await t.json();i={...i,...o}});var Y=async()=>{let e=await caches.open(m);return i.savedAt=Date.now(),e.put(D,new Response(JSON.stringify(i),{status:200,statusText:"OK"}))},ue=async(e,t,o="all")=>{let n=o==="all"||!o?await a.clients.matchAll({}):(r=>r?[r]:[])(await a.clients.get(o));for(let r of n)r.postMessage({type:e,contents:t})},x=(e,t="all",o=!1)=>{if(i.log||o)return ue("info",e,t)};a.oninstall=e=>e.waitUntil(a.skipWaiting());a.onactivate=e=>{e.waitUntil((async()=>{await a.clients.claim(),console.info("{\u{1F4E5} install} new script installed"),console.info("{\u{1F525} activate} new script in control, started with config",i)})())};var Q={getFile:async e=>await(await caches.open(m)).match(e)||null,putFile:async(e,t)=>(await(await caches.open(m)).put(e,t),!0),queryUsage:async()=>({quota:0,usage:0}),deleteAllFiles:async()=>!0,deleteFile:async()=>!0},ee=(...e)=>{i.log&&console.info(...e)},ge=X({cache:Q,rootDoc:P,fetchFile:fetch,log:ee});a.onfetch=e=>e.respondWith(ge(e));var pe=Z({origin:a.location.origin,fileCache:Q,log:ee});a.addEventListener("backgroundfetchsuccess",e=>e.waitUntil(pe(e)));a.addEventListener("backgroundfetchclick",()=>a.clients.openWindow("/"));a.addEventListener("backgroundfetchabort",()=>{x("bg fetch aborted")});a.addEventListener("backgroundfetchfailure",()=>{x("bg fetch failed")});var V={"config:silent_logs":()=>{i.log=!1},"config:verbose_logs":()=>{i.log=!0},"list:consts":e=>{x(`listed constants: config_file_url=${D}, ROOT_DOC=${P}`,e,!0)},"list:connected_clients":async e=>{let t=await a.clients.matchAll();x(`connected clients (${t.length}): ${t.map(o=>`(id=${o.id||"unknown"}, url=${o.url}, type=${o.type})
`).join(",")}`,e,!0)},"list:config":e=>{x(`config: ${JSON.stringify(i)}`,e,!0)}};a.onmessage=e=>e.waitUntil((async()=>{let t=e.data,o=e.source.id;if(!V[t?.action])return console.warn(`received incorrectly encoded message ${t} from client ${o}`);await V[t.action](o),t.action.startsWith("config:")&&(Y(),console.info("config changed, new config:",i))})());})();
